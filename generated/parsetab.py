
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSDIGIT CHARACTERS BOOLEAN CONTEXT_OP ADD_OP MUL_OP COMP_OP IDENTIFIER EQUAL NOTEQUAL STEP FOR TO WHILE IF ELSE SWITCH CASE DEFAULT PRINT PI TRUE FALSE NUMBER LIST TEXT BOOL BREAK LOOP programme : statement\n    | statement programme  programme : statement ';' programme  statement : assignation\n        | structure  statement : PRINT '{' expression '}'  structure : WHILE expression '{' programme '}'  structure : IF condition '{' programme '}'  structure : SWITCH condition '{' programme '}'  structure : CASE DIGIT '{' programme BREAK '}'  expression : expression ADD_OP expression\n            | expression MUL_OP expression  expression : IDENTIFIER  expression : DIGIT  expression : TEXT  expression : TRUE\n    | FALSE  expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS  assignation : IDENTIFIER '=' expression  assignation : BOOL IDENTIFIER '=' TRUE\n     | BOOL IDENTIFIER '=' FALSE  assignation : NUMBER IDENTIFIER '=' DIGIT  assignation : TEXT IDENTIFIER '=' CHARACTERS  condition : expression EQUAL expression\n    | expression NOTEQUAL expression\n    | expression '>' expression\n    | expression '<' expression "
    
_lr_action_items = {'PRINT':([0,2,3,4,15,23,24,25,26,27,35,39,42,44,49,50,51,52,53,54,55,57,58,59,67,68,69,71,],[5,5,-4,-5,5,-13,-14,-15,-16,-17,-20,5,-19,5,5,5,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'IDENTIFIER':([0,2,3,4,7,8,9,10,11,12,15,16,17,22,23,24,25,26,27,28,35,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,67,68,69,71,],[6,6,-4,-5,18,19,20,23,23,23,6,23,23,23,-13,-14,-15,-16,-17,23,-20,6,23,23,-19,6,23,23,23,23,6,6,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'BOOL':([0,2,3,4,15,23,24,25,26,27,35,39,42,44,49,50,51,52,53,54,55,57,58,59,67,68,69,71,],[7,7,-4,-5,7,-13,-14,-15,-16,-17,-20,7,-19,7,7,7,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'NUMBER':([0,2,3,4,15,23,24,25,26,27,35,39,42,44,49,50,51,52,53,54,55,57,58,59,67,68,69,71,],[8,8,-4,-5,8,-13,-14,-15,-16,-17,-20,8,-19,8,8,8,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'TEXT':([0,2,3,4,10,11,12,15,16,17,22,23,24,25,26,27,28,35,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,67,68,69,71,],[9,9,-4,-5,25,25,25,9,25,25,25,-13,-14,-15,-16,-17,25,-20,9,25,25,-19,9,25,25,25,25,9,9,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'WHILE':([0,2,3,4,15,23,24,25,26,27,35,39,42,44,49,50,51,52,53,54,55,57,58,59,67,68,69,71,],[10,10,-4,-5,10,-13,-14,-15,-16,-17,-20,10,-19,10,10,10,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'IF':([0,2,3,4,15,23,24,25,26,27,35,39,42,44,49,50,51,52,53,54,55,57,58,59,67,68,69,71,],[11,11,-4,-5,11,-13,-14,-15,-16,-17,-20,11,-19,11,11,11,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'SWITCH':([0,2,3,4,15,23,24,25,26,27,35,39,42,44,49,50,51,52,53,54,55,57,58,59,67,68,69,71,],[12,12,-4,-5,12,-13,-14,-15,-16,-17,-20,12,-19,12,12,12,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'CASE':([0,2,3,4,15,23,24,25,26,27,35,39,42,44,49,50,51,52,53,54,55,57,58,59,67,68,69,71,],[13,13,-4,-5,13,-13,-14,-15,-16,-17,-20,13,-19,13,13,13,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'$end':([1,2,3,4,14,23,24,25,26,27,33,35,42,51,52,53,54,55,57,58,59,67,68,69,71,],[0,-1,-4,-5,-2,-13,-14,-15,-16,-17,-3,-20,-19,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'}':([2,3,4,14,23,24,25,26,27,33,34,35,42,51,52,53,54,55,56,57,58,59,60,65,67,68,69,70,71,],[-1,-4,-5,-2,-13,-14,-15,-16,-17,-3,51,-20,-19,-6,-21,-22,-23,-24,67,-11,-12,-18,68,69,-7,-8,-9,71,-10,]),'BREAK':([2,3,4,14,23,24,25,26,27,33,35,42,51,52,53,54,55,57,58,59,66,67,68,69,71,],[-1,-4,-5,-2,-13,-14,-15,-16,-17,-3,-20,-19,-6,-21,-22,-23,-24,-11,-12,-18,70,-7,-8,-9,-10,]),';':([2,3,4,23,24,25,26,27,35,42,51,52,53,54,55,57,58,59,67,68,69,71,],[15,-4,-5,-13,-14,-15,-16,-17,-20,-19,-6,-21,-22,-23,-24,-11,-12,-18,-7,-8,-9,-10,]),'{':([5,21,23,24,25,26,27,29,31,32,42,57,58,59,61,62,63,64,],[16,39,-13,-14,-15,-16,-17,44,49,50,-19,-11,-12,-18,-25,-26,-27,-28,]),'=':([6,18,19,20,],[17,36,37,38,]),'DIGIT':([10,11,12,13,16,17,22,28,37,40,41,45,46,47,48,],[24,24,24,32,24,24,24,24,54,24,24,24,24,24,24,]),'TRUE':([10,11,12,16,17,22,28,36,40,41,45,46,47,48,],[26,26,26,26,26,26,26,52,26,26,26,26,26,26,]),'FALSE':([10,11,12,16,17,22,28,36,40,41,45,46,47,48,],[27,27,27,27,27,27,27,53,27,27,27,27,27,27,]),'(':([10,11,12,16,17,22,28,40,41,45,46,47,48,],[28,28,28,28,28,28,28,28,28,28,28,28,28,]),'ADD_OP':([10,11,12,16,17,21,22,23,24,25,26,27,28,30,34,35,40,41,42,43,45,46,47,48,57,58,59,61,62,63,64,],[22,22,22,22,22,40,22,-13,-14,-15,-16,-17,22,40,40,40,22,22,-19,40,22,22,22,22,-11,-12,-18,40,40,40,40,]),'MUL_OP':([21,23,24,25,26,27,30,34,35,42,43,57,58,59,61,62,63,64,],[41,-13,-14,-15,-16,-17,41,41,41,-19,41,41,-12,-18,41,41,41,41,]),'EQUAL':([23,24,25,26,27,30,42,57,58,59,],[-13,-14,-15,-16,-17,45,-19,-11,-12,-18,]),'NOTEQUAL':([23,24,25,26,27,30,42,57,58,59,],[-13,-14,-15,-16,-17,46,-19,-11,-12,-18,]),'>':([23,24,25,26,27,30,42,57,58,59,],[-13,-14,-15,-16,-17,47,-19,-11,-12,-18,]),'<':([23,24,25,26,27,30,42,57,58,59,],[-13,-14,-15,-16,-17,48,-19,-11,-12,-18,]),')':([23,24,25,26,27,42,43,57,58,59,],[-13,-14,-15,-16,-17,-19,59,-11,-12,-18,]),'CHARACTERS':([38,],[55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,2,15,39,44,49,50,],[1,14,33,56,60,65,66,]),'statement':([0,2,15,39,44,49,50,],[2,2,2,2,2,2,2,]),'assignation':([0,2,15,39,44,49,50,],[3,3,3,3,3,3,3,]),'structure':([0,2,15,39,44,49,50,],[4,4,4,4,4,4,4,]),'expression':([10,11,12,16,17,22,28,40,41,45,46,47,48,],[21,30,30,34,35,42,43,57,58,61,62,63,64,]),'condition':([11,12,],[29,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme','parser5.py',27),
  ('programme -> statement programme','programme',2,'p_programme','parser5.py',28),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser5.py',36),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',41),
  ('statement -> structure','statement',1,'p_statement','parser5.py',42),
  ('statement -> PRINT { expression }','statement',4,'p_statement_print','parser5.py',47),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parser5.py',52),
  ('structure -> IF condition { programme }','structure',5,'p_structure_if','parser5.py',57),
  ('structure -> SWITCH condition { programme }','structure',5,'p_structure_switch','parser5.py',62),
  ('structure -> CASE DIGIT { programme BREAK }','structure',6,'p_structure_case','parser5.py',67),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',72),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',73),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','parser5.py',78),
  ('expression -> DIGIT','expression',1,'p_expression_num','parser5.py',83),
  ('expression -> TEXT','expression',1,'p_expression_text','parser5.py',88),
  ('expression -> TRUE','expression',1,'p_expression_bool','parser5.py',93),
  ('expression -> FALSE','expression',1,'p_expression_bool','parser5.py',94),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',99),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',104),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser5.py',109),
  ('assignation -> BOOL IDENTIFIER = TRUE','assignation',4,'p_assign_bool','parser5.py',115),
  ('assignation -> BOOL IDENTIFIER = FALSE','assignation',4,'p_assign_bool','parser5.py',116),
  ('assignation -> NUMBER IDENTIFIER = DIGIT','assignation',4,'p_assign_number','parser5.py',122),
  ('assignation -> TEXT IDENTIFIER = CHARACTERS','assignation',4,'p_assign_text','parser5.py',128),
  ('condition -> expression EQUAL expression','condition',3,'p_condition','parser5.py',134),
  ('condition -> expression NOTEQUAL expression','condition',3,'p_condition','parser5.py',135),
  ('condition -> expression > expression','condition',3,'p_condition','parser5.py',136),
  ('condition -> expression < expression','condition',3,'p_condition','parser5.py',137),
]
