
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSDIGIT CHARACTERS BOOLEAN CONTEXT_OP ADD_OP MUL_OP COMP_OP IDENTIFIER EQUAL NOTEQUAL STEP FOR TO WHILE IF ELSE SWITCH CASE DEFAULT PRINT PI TRUE FALSE NUMBER LIST TEXT BOOL BREAK LOOP programme : statement\n    | statement programme programme : statement ';' programme  statement : assignation\n        | structure  statement : PRINT expression  structure : WHILE expression '{' programme '}' expression : expression ADD_OP expression\n            | expression MUL_OP expression expression : DIGIT  expression : TRUE\n    | FALSE expression : IDENTIFIER  expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS  assignation : BOOL IDENTIFIER '=' BOOLEAN  assignation : NUMBER IDENTIFIER '=' DIGIT  assignation : TEXT IDENTIFIER '=' CHARACTERS "
    
_lr_action_items = {'PRINT':([0,2,3,4,11,12,14,15,16,17,26,31,32,33,34,35,36,37,39,],[5,5,-4,-5,5,-6,-10,-11,-12,-13,-15,5,-8,-9,-14,-16,-17,-18,-7,]),'BOOL':([0,2,3,4,11,12,14,15,16,17,26,31,32,33,34,35,36,37,39,],[6,6,-4,-5,6,-6,-10,-11,-12,-13,-15,6,-8,-9,-14,-16,-17,-18,-7,]),'NUMBER':([0,2,3,4,11,12,14,15,16,17,26,31,32,33,34,35,36,37,39,],[7,7,-4,-5,7,-6,-10,-11,-12,-13,-15,7,-8,-9,-14,-16,-17,-18,-7,]),'TEXT':([0,2,3,4,11,12,14,15,16,17,26,31,32,33,34,35,36,37,39,],[8,8,-4,-5,8,-6,-10,-11,-12,-13,-15,8,-8,-9,-14,-16,-17,-18,-7,]),'WHILE':([0,2,3,4,11,12,14,15,16,17,26,31,32,33,34,35,36,37,39,],[9,9,-4,-5,9,-6,-10,-11,-12,-13,-15,9,-8,-9,-14,-16,-17,-18,-7,]),'$end':([1,2,3,4,10,12,14,15,16,17,23,26,32,33,34,35,36,37,39,],[0,-1,-4,-5,-2,-6,-10,-11,-12,-13,-3,-15,-8,-9,-14,-16,-17,-18,-7,]),'}':([2,3,4,10,12,14,15,16,17,23,26,32,33,34,35,36,37,38,39,],[-1,-4,-5,-2,-6,-10,-11,-12,-13,-3,-15,-8,-9,-14,-16,-17,-18,39,-7,]),';':([2,3,4,12,14,15,16,17,26,32,33,34,35,36,37,39,],[11,-4,-5,-6,-10,-11,-12,-13,-15,-8,-9,-14,-16,-17,-18,-7,]),'DIGIT':([5,9,13,18,24,25,29,],[14,14,14,14,14,14,36,]),'TRUE':([5,9,13,18,24,25,],[15,15,15,15,15,15,]),'FALSE':([5,9,13,18,24,25,],[16,16,16,16,16,16,]),'IDENTIFIER':([5,6,7,8,9,13,18,24,25,],[17,19,20,21,17,17,17,17,17,]),'(':([5,9,13,18,24,25,],[18,18,18,18,18,18,]),'ADD_OP':([5,9,12,13,14,15,16,17,18,22,24,25,26,27,32,33,34,],[13,13,24,13,-10,-11,-12,-13,13,24,13,13,-15,24,-8,-9,-14,]),'MUL_OP':([12,14,15,16,17,22,26,27,32,33,34,],[25,-10,-11,-12,-13,25,-15,25,25,-9,-14,]),'{':([14,15,16,17,22,26,32,33,34,],[-10,-11,-12,-13,31,-15,-8,-9,-14,]),')':([14,15,16,17,26,27,32,33,34,],[-10,-11,-12,-13,-15,34,-8,-9,-14,]),'=':([19,20,21,],[28,29,30,]),'BOOLEAN':([28,],[35,]),'CHARACTERS':([30,],[37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,2,11,31,],[1,10,23,38,]),'statement':([0,2,11,31,],[2,2,2,2,]),'assignation':([0,2,11,31,],[3,3,3,3,]),'structure':([0,2,11,31,],[4,4,4,4,]),'expression':([5,9,13,18,24,25,],[12,22,26,27,32,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme','parser5.py',24),
  ('programme -> statement programme','programme',2,'p_programme','parser5.py',25),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser5.py',33),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',38),
  ('statement -> structure','statement',1,'p_statement','parser5.py',39),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser5.py',44),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parser5.py',49),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',54),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',55),
  ('expression -> DIGIT','expression',1,'p_expression_num','parser5.py',65),
  ('expression -> TRUE','expression',1,'p_expression_bool','parser5.py',70),
  ('expression -> FALSE','expression',1,'p_expression_bool','parser5.py',71),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','parser5.py',76),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',81),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',86),
  ('assignation -> BOOL IDENTIFIER = BOOLEAN','assignation',4,'p_assign_bool','parser5.py',97),
  ('assignation -> NUMBER IDENTIFIER = DIGIT','assignation',4,'p_assign_number','parser5.py',103),
  ('assignation -> TEXT IDENTIFIER = CHARACTERS','assignation',4,'p_assign_text','parser5.py',109),
]
